[mode]
utf8			1
scroll			0
view_mode		0
syntax_hl		1
show_dot_file		0
show_file_info		2
sort_by			0
ignore_case		0
draw_cursor		0
backup_files		9
cursor_center		0
history			1
regexp			1
tab_eol_notation	1
map_key_7f_bs		1

key_list_lines		0
tab_size		8

[color]
#color_default       -white +black
#color_title         -cyan  +black
#color_status        -cyan  +black
#color_key_list      -green +black
#color_text_normal   -white +black
#color_text_selected -green
#color_cursor        -red   +black
#color_cursor_line   -green
#color_menu_frame    -cyan  +blue
#color_menu_item     -blue  +cyan
#color_menu_selected -white +black
#color_input         -white +black

# sh/bash
file_type "shell" "\.(sh|SH)$"
color_syntax ="\b(if|then|else|elif|fi|for|while|break|do|done)\b" +red
color_syntax ="\b(case|esac|function|trap|echo|wire|reg)\b"        +red
color_syntax ="#.*"                                                +brown
tab_size	4

# C/C++ files
file_type "C" "\.(c|C|cc|CC|cpp|CPP|h|H)[0-9~]*$"
color_syntax ="\b[0-9]+\b"                                             +lblue
color_syntax ="\b[A-Z_][0-9A-Z_]+\b"                                   +lblue
color_syntax ="\b(alignas|alignof|and|and|and_eq|asm)\b"               +lred
color_syntax ="\b(atomic_cancel|atomic_commit|atomic_noexcept|auto)\b" +lred
color_syntax ="\b(bitand|bitor|bool|break)\b"                          +lred
color_syntax ="\b(case|catch|char|char16_t|char32_t|class)\b"          +lred
color_syntax ="\b(compl|concept|const|constexpr|const_cast)\b"         +lred
color_syntax ="\b(continue|co_await|co_return|co_yield)\b"             +lred
color_syntax ="\b(decltype|default|delete|do|double|dynamic_cast)\b"   +lred
color_syntax ="\b(else|enum|explicit|export|extern)\b"                 +lred
color_syntax ="\b(false|final|float|for|friend|goto)\b"                +lred
color_syntax ="\b(if|import|inline|int|long)\b"                        +lred
color_syntax ="\b(module|mutable|namespace|new)\b"                     +lred
color_syntax ="\b(noexcept|not|not_eq|nullptr)\b"                      +lred
color_syntax ="\b(private|protected|public)\b"                         +lred
color_syntax ="\b(operator|or|or_eq|override)\b"                       +lred
color_syntax ="\b(register|reinterpret_cast|requires|return)\b"        +lred
color_syntax ="\b(short|signed|sizeof)\b"                              +lred
color_syntax ="\b(static|static_assert|static_cast)\b"                 +lred
color_syntax ="\b(struct|switch|synchronized)\b"                       +lred
color_syntax ="\b(template|this|thread_local|throw)\b"                 +lred
color_syntax ="\b(true|try|typedef|typeid|typename)\b"                 +lred
color_syntax ="\b(union|unsigned|using|virtual|void|volatile)\b"       +lred
color_syntax ="\b(wchar_t|while|xor|xor_eq)\b"                         +lred
color_syntax ="^#[ \t]*(include|define|undef|pragma|error|warning)\b"  +lmagenta
color_syntax ="^#[ \t]*(if|ifdef|ifndef|else|elif|endif)\b"            +lmagenta
color_syntax ="\bdefined\b"                                            +lmagenta
color_syntax ="//.*"                                           +brown
color_syntax ="///.*"                                          +lcyan
color_syntax ="////.*"                                         +lgreen
color_syntax ="/////.*"                                        +gray
color_syntax <"/\*" >"\*/"                                     +brown
color_syntax <"^#[ \t]*if[ \t]+0\b"  >"^#[ \t]*(else|endif)\b" +lgreen
tab_size	4

# Ruby
file_type "rb" "\.(rb|RB)$"
color_syntax ="\b[0-9]+\b"                +blue
color_syntax ="\b[A-Z_][0-9A-Z_]+\b"      +blue
color_syntax ="\".*\""                    +blue
color_syntax ="'.*\'"                     +blue
color_syntax ="/.*/"                      +blue
color_syntax ="\b(BEGIN|END|begin|end)\b" +red
color_syntax ="\b(class|def|undef|defined?|module|alias|self|super|ensure)\b" +red
color_syntax ="\b(do|redo|yield|break|return|rescure|retry)\b"                +red
color_syntax ="\b(if|unless|else|elsif|then)\b"                               +red
color_syntax ="\b(for|in|while|until|case|when|return)\b"                     +red
color_syntax ="\b(nil|true|false)\b" +red
color_syntax ="\b(and|or|not)\b"     +red
color_syntax ="( |\t)#.*"            +brown
color_syntax ="^#.*"                 +magenta
color_syntax <"=begin"  >"=end"      +magenta
tab_size	4

# Python
file_type "py" "\.(py|PY)$"
color_syntax ="^#.*"                  +magenta
color_syntax ="\b[0-9]+\b"            +blue
color_syntax ="\b[A-Z_][0-9A-Z_]+\b"  +blue
color_syntax ="\".*\""                +blue
color_syntax ="'.*\'"                 +blue
color_syntax ="\b(None|False|True)\b" +red
color_syntax ="\b(and|as|assert|async|await|break|class|continue|def|del)\b" +red
color_syntax ="\b(elif|else|except|finally|for|from|global)\b"   +red
color_syntax ="\b(if|import|in|is|lambda|nonlocal|not|or)\b"     +red
color_syntax ="\b(pass|raise|return|try|while|with|yield)\b"     +red
tab_size	4

#Java
file_type "java" "\.(java|JAVA)$"
tab_size	4
color_syntax ="\b[0-9_]+\b"               +blue
color_syntax ="\b[A-Z_][0-9A-Z_]+\b"      +blue
color_syntax ="\b(package|import|class|new|this|super)\b"                                 +red
color_syntax ="\b(private|global|protected|public|static)\b"                              +red
color_syntax ="\b(object|interface|override|abstract|extends|implements|final|finally)\b" +red
color_syntax ="\b(enum|typealias|typeof|instanceof)\b"                                    +red
color_syntax ="\b(void|boolean|char|byte|short|int|long|float|double)\b"                  +red
color_syntax ="\b(do|continue|break|return|try|throw|throws|catch)\b"                     +red
color_syntax ="\b(if|else|for|switch|case|default|while|when|return)\b"                   +red
color_syntax ="\b(null|true|false|and|or|not)\b"                                          +red
color_syntax ="\".*\""                    +blue
color_syntax ="'.*\'"                     +blue
color_syntax ="//.*"                      +brown
color_syntax <"/\*" >"\*/"                +brown

#Kotlin
file_type "rb" "\.(kt|KT)$"
tab_size	4
color_syntax ="\b[0-9_]+\b"               +blue
color_syntax ="\b[A-Z_][0-9A-Z_]+\b"      +blue
color_syntax ="\b(package|import|class|this|super)\b"                    +red
color_syntax ="\b(object|interface|override|private|global|protected|fun)\b" +red
color_syntax ="\b(val|var|typealias|typeof)\b"                           +red
color_syntax ="\b(Unit|Boolean|Char|String|Byte|Short|Int|Long|Float|Double)\b" +red
color_syntax ="\b(do|continue|break|return|try|throw)\b"                 +red
color_syntax ="\b(if|else|for|in|as|while|when|return)\b"                +red
color_syntax ="\b(null|true|false|and|or|not)\b"                         +red
color_syntax ="//.*"                      +brown
color_syntax ="\".*\""                    +blue
color_syntax ="'.*\'"                     +blue
color_syntax <"/\*" >"\*/"                +brown

# asm files
file_type "ASM" "\.(asm|ASM|s|S)$"
color_syntax ="\b[0-9][0-9A-Fa-f_]*\b"                  +blue
color_syntax ="\b[0-9][0-9A-Fa-f_]+(d|D|h|H)\b"         +blue
color_syntax ="\b[A-Z_][0-9A-Z_]+\b"                    +blue
color_syntax ="\b(if|ife|ifdef|ifndef|else|endif)\b"    +red
color_syntax ="\b(equ|assume|org|end)\b"                +red
color_syntax ="\b(macro|endm|segment|ends|proc|endp)\b" +red
color_syntax ="\b(align|db|dw|dd|dup|mod)\b"            +red
color_syntax =";.*"                                     +magenta
color_syntax <"/\*"  >"\*/"                             +magenta
tab_size	8

# HTML file
file_type "HTML" "\.(html|HTML|htm|HTM)$"
color_syntax <"<"  >">"    +blue
color_syntax ="&[^; \t]*;" +red
tab_size	4

# Verilog HDL file
file_type "VHDL" "\.(v|V)$"
color_syntax ="\b(module|endmodule|always|posedge|negedge|assign)\b" +red
color_syntax ="\b(parameter|input|output|inout|wire|reg)\b"          +red
color_syntax ="\b(if|else|begin|end)\b"                              +red
color_syntax ="//.*"                                                 +magenta
color_syntax <"/\*"  >"\*/"                                          +brown
tab_size	4

# VHDL files
file_type "VHDL" "\.(vhdl|VHDL|vhd|VHD)$"
color_syntax ="\b(IF|ELSE|ENDIF|THEN|WHEN)\b" +red
tab_size	4

# fnt text based font file
file_type "FNT" "\.(fnt|FNT)$"
color_syntax ="#" +green -blue
tab_size	4

# MD mark down file
file_type "MD" "\.(md|MD)$"
color_syntax ="#" +blue
color_syntax ="~~~" +blue
tab_size	8

# Protobuf definition file
file_type "proto" "\.(proto|PROTO)$"
color_syntax ="///.*"                                                +brown
tab_size	4

[key bindings]
#include .emacs.berc
#include .wordstar.berc
